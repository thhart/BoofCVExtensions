package boofcv.helper.visualize;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.swing.*;
import boofcv.helper.HelperConvert;
import boofcv.helper.visualize.control.Control;
import boofcv.helper.visualize.control.Control.ControlListener;
import boofcv.io.image.ConvertBufferedImage;
import boofcv.struct.image.*;

public class DevPanel extends JDialog {
   private final Control[] controls;
   private JPanel contentPane;
   private JPanel panelControl;
   private JToggleButton toggleButtonSource;
   private JPanel panelThumbs;
   private JPanel panelSource;
   public static String KEY_RESULT = "_RESULT_";
   public static String KEY_SOURCE = "_SOURCE_";
   private final Map<String, ImageBase> imageContainer = new ConcurrentHashMap<>();

   public DevPanel(ControlListener listener, Control... controls) {
      setContentPane(contentPane);
      setModal(false);

      // call onCancel() when cross is clicked
      setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
      addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent e) {
            onCancel();
         }
      });
      this.controls = controls;
      // call onCancel() on ESCAPE
      contentPane.registerKeyboardAction(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
            onCancel();
         }
      }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
      final Box box = Box.createVerticalBox();
      panelControl.add(box, BorderLayout.NORTH);
      for (Control control : controls) {
         control.setControlListener(listener);
         box.add(control.getComponent());
      }
      setSize(1280, 768);
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            panelSource.add(new Painter());
            panelThumbs.add(new PainterThumbnail());
            setVisible(true);
         }
      });
   }

   public DevPanel(ControlListener listener, Map<String, Control> map) {
      this(listener, map.values().toArray(new Control[map.size()]));
   }

   public Object getValue(Object name) {
      if (name instanceof Control) return ((Control)name).getValue();
      for (Control control : controls) {
         if (control.getName().equals(name)) return control.getValue();
      }
      return null;
   }

   public Double getValueAsDouble(Object name) {
      return (Double)getValue(name);
   }

   public Integer getValueAsInt(Object name) {
      return (Integer)getValue(name);
   }

   public Boolean getValueAsBoolean(Object name) {
      return (Boolean)getValue(name);
   }

   public void updateImage(String key, BufferedImage image) {
      if (image.getSampleModel().getNumBands() > 1) {
         final InterleavedU8 dst = new InterleavedU8(image.getWidth(), image.getHeight(), 3);
         ConvertBufferedImage.convertFromInterleaved(image, dst, true);
         updateImage(key, dst);
      } else {
         final GrayU8 dst = new GrayU8(image.getWidth(), image.getHeight());
         ConvertBufferedImage.convertFrom(image, dst);
         updateImage(key, dst);
      }
   }

   public void updateImage(String key, ImageBase image) {
      imageContainer.put(key, image);
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            panelSource.repaint();
         }
      });
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            panelThumbs.repaint();
         }
      });
   }

   private void onCancel() {
      // add your code here if necessary
      dispose();
   }

   {
      // GUI initializer generated by IntelliJ IDEA GUI Designer
      // >>> IMPORTANT!! <<<
      // DO NOT EDIT OR ADD ANY CODE HERE!
      $$$setupUI$$$();
   }

   /**
    Method generated by IntelliJ IDEA GUI Designer
    >>> IMPORTANT!! <<<
    DO NOT edit this method OR call it in your code!

    @noinspection ALL */
   private void $$$setupUI$$$() {
      contentPane = new JPanel();
      contentPane.setLayout(new GridBagLayout());
      panelThumbs = new JPanel();
      panelThumbs.setLayout(new BorderLayout(0, 0));
      panelThumbs.setMinimumSize(new Dimension(4, 200));
      GridBagConstraints gbc;
      gbc = new GridBagConstraints();
      gbc.gridx = 0;
      gbc.gridy = 1;
      gbc.weightx = 1.0;
      gbc.weighty = 1.0;
      gbc.fill = GridBagConstraints.BOTH;
      contentPane.add(panelThumbs, gbc);
      panelThumbs.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
      final JPanel panel1 = new JPanel();
      panel1.setLayout(new GridBagLayout());
      gbc = new GridBagConstraints();
      gbc.gridx = 0;
      gbc.gridy = 0;
      gbc.weightx = 1.0;
      gbc.weighty = 1.0;
      gbc.fill = GridBagConstraints.BOTH;
      contentPane.add(panel1, gbc);
      final JToolBar toolBar1 = new JToolBar();
      toolBar1.setEnabled(false);
      toolBar1.setFloatable(false);
      gbc = new GridBagConstraints();
      gbc.gridx = 0;
      gbc.gridy = 0;
      gbc.fill = GridBagConstraints.HORIZONTAL;
      panel1.add(toolBar1, gbc);
      toolBar1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
      toggleButtonSource = new JToggleButton();
      toggleButtonSource.setText("Source");
      toolBar1.add(toggleButtonSource);
      panelSource = new JPanel();
      panelSource.setLayout(new BorderLayout(0, 0));
      gbc = new GridBagConstraints();
      gbc.gridx = 0;
      gbc.gridy = 1;
      gbc.weightx = 1.0;
      gbc.weighty = 1.0;
      gbc.fill = GridBagConstraints.BOTH;
      panel1.add(panelSource, gbc);
      panelSource.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
      panelControl = new JPanel();
      panelControl.setLayout(new BorderLayout(0, 0));
      panelControl.setMinimumSize(new Dimension(200, 24));
      gbc = new GridBagConstraints();
      gbc.gridx = 1;
      gbc.gridy = 0;
      gbc.gridheight = 2;
      gbc.weighty = 1.0;
      gbc.fill = GridBagConstraints.BOTH;
      panel1.add(panelControl, gbc);
   }

   /**
    @noinspection ALL */
   public JComponent $$$getRootComponent$$$() { return contentPane; }

   class Painter extends JPanel {
      protected void paintComponent(Graphics g) {
         super.paintComponent(g);
         if (!toggleButtonSource.isSelected()) {
            if (imageContainer.containsKey(KEY_RESULT)) {
               final ImageBase image = imageContainer.get(KEY_RESULT);
               final int width = image.width;
               final int height = image.height;
               g.drawImage(ConvertBufferedImage.convertTo(image, null, true), 0, 0, width, height, null);
            }
         } else {
            if (imageContainer.containsKey(KEY_SOURCE)) {
               final ImageBase image = imageContainer.get(KEY_SOURCE);
               g.drawImage(ConvertBufferedImage.convertTo(image, null, true), 0, 0, getWidth(), getHeight(), null);
            }
         }
      }
   }

   class PainterThumbnail extends JPanel {
      protected void paintComponent(Graphics g) {
         super.paintComponent(g);
         final int height = getHeight() - 26;
         int pos = 0;
         for (String key : imageContainer.keySet()) {
            if (!key.equals(KEY_SOURCE) && !key.equals(KEY_RESULT)) {
               final ImageBase image = imageContainer.get(key);
               int ph = (image.height < height) ? image.height : height;
               int pw = (int)((double)ph / image.height * image.width);
               g.drawImage(HelperConvert.convertToBufferedGray(image), pos, 24, pw, ph, null);
               g.setColor(Color.WHITE);
               g.fillRect(pos, 0, pw, 24);
               g.setColor(Color.DARK_GRAY);
               g.drawRect(pos, 24, pw, pw);
               g.setColor(Color.BLACK);
               g.drawString(key, pos + 1, 18);
               pos += pw;
            }
         }
      }
   }
}
